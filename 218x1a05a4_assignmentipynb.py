# -*- coding: utf-8 -*-
"""218x1a05a4_assignmentipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DN5tHdg-SlblfKW67-2uADDEglnaUStG
"""

import os

# List files in the /content/ directory
print(os.listdir('/content/'))

import pandas as pd

# Load the CSV file
df = pd.read_csv('/content/CarPrice_Assignment.csv')

# Load the Excel file (Data Dictionary)
data_dict = pd.read_excel('/content/Data Dictionary - carprices.xlsx')

# Display the first few rows of each file to verify
print(df.head())
print(data_dict.head())

# Dataset size
print("Dataset Size:", df.shape)

# Dataset information
df.info()

import pandas as pd

df = pd.read_csv('/content/CarPrice_Assignment.csv')
print(df.isnull().sum())

numeric_cols = df.select_dtypes(include=['number']).columns
categorical_cols = df.select_dtypes(include=['object']).columns

print("Numeric columns:", numeric_cols)
print("Categorical columns:", categorical_cols)

df[numeric_cols] = df[numeric_cols].fillna(df[numeric_cols].median())
print(df.isnull().sum())

for col in categorical_cols:
    df[col].fillna(df[col].mode()[0], inplace=True)
print(df.isnull().sum())

print(df.describe(include='all'))

Q1 = df[numeric_cols].quantile(0.25)
Q3 = df[numeric_cols].quantile(0.75)
IQR = Q3 - Q1

outlier_condition = (df[numeric_cols] < (Q1 - 1.5 * IQR)) | (df[numeric_cols] > (Q3 + 1.5 * IQR))
df_no_outliers = df[~outlier_condition.any(axis=1)]

print("Shape before removing outliers:", df.shape)
print("Shape after removing outliers:", df_no_outliers.shape)

import matplotlib.pyplot as plt
import seaborn as sns

sns.histplot(df['price'])
plt.title('Distribution of Car Prices')
plt.xlabel('Price')
plt.ylabel('Frequency')
plt.show()

sns.scatterplot(x='citympg', y='price', data=df)
plt.title('Price vs City MPG')
plt.xlabel('City MPG')
plt.ylabel('Price')
plt.show()

sns.pairplot(df[['price', 'citympg', 'curbweight']])
plt.show()

import pandas as pd

# Load the dataset
df = pd.read_csv('/content/CarPrice_Assignment.csv')

# Drop the target column from the features and extract the target variable
X = df.drop('price', axis=1)
y = df['price']

# Convert categorical columns to dummy/indicator variables
X = pd.get_dummies(X, drop_first=True)

# Print the shapes of X and y to verify dimensions
print("Shape of X:", X.shape)
print("Shape of y:", y.shape)

# Display the first few rows of the feature matrix and target variable
print("\nFirst few rows of X:")
print(X.head())

print("\nFirst few rows of y:")
print(y.head())

# Print the column names of X to see the dummy variables
print("\nColumns in X:")
print(X.columns)

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

print("First few rows of scaled X:")
print(X_scaled[:5])

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

print("Shape of X_train:", X_train.shape)
print("Shape of X_test:", X_test.shape)
print("Shape of y_train:", y_train.shape)
print("Shape of y_test:", y_test.shape)

from sklearn.linear_model import LinearRegression

model = LinearRegression()
model.fit(X_train, y_train)

print("Model trained successfully.")

y_pred = model.predict(X_test)

print("First few predictions:")
print(y_pred[:5])

from sklearn.metrics import mean_squared_error, r2_score

mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print("Mean Squared Error:", mse)
print("R^2 Score:", r2)

print("Feature columns:", X.columns)

# Example random values
random_values = pd.DataFrame({
    'wheelbase': [2500],
    'carlength': [4500],
    'carwidth': [1800],
    'carheight': [1400],
    'curbweight': [3000],
    'enginesize': [160],
    'boreratio': [3.1],
    'stroke': [3.2],
    'compressionratio': [10.0],
    'horsepower': [120],
    'peakrpm': [5500],
    'citympg': [25],
    'highwaympg': [35]
})

# Encode and scale
random_values_encoded = pd.get_dummies(random_values, drop_first=True)
random_values_encoded = random_values_encoded.reindex(columns=X.columns, fill_value=0)
random_values_scaled = scaler.transform(random_values_encoded)
predicted_price = model.predict(random_values_scaled)

print("Predicted Price:", predicted_price)